version: '3.8'

services:
  frontend:
    container_name: FRONTEND
    networks:
      - portofolio_network
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev -- --host
    depends_on:
      - api_gateway

  api_gateway:
    container_name: API_GATEWAY
    networks:
      - portofolio_network
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile.api_gateway
    ports:
      - "8080:8080"
    volumes:
      - ./backend/api_gateway/src:/app/src
      - ./backend/api_gateway/config:/app/config  # if you want hot reload on config too
    environment:
      - API_BASE_URL=http://localhost:8010
      - COVER_LETTER_SERVICE_URL=http://service_cover_letter:8010
      - ALLOWED_ORIGINS=http://localhost,http://localhost:5173,http://localhost:8080,http://frontend:5173,http://api_gateway:8080
      - LLM_HOST=http://ollama:11434
    depends_on:
      - service_cover_letter
    command: uvicorn src.main_system_trigger:app --host 0.0.0.0 --port 8080 --reload

  service_cover_letter:
    container_name: service_cover_letter
    networks:
      - portofolio_network
    build:
      context: ./backend/services/service_cover_letter
      dockerfile: Dockerfile.service_cover_letter
    ports:
      - "8010:8010"
    depends_on:
      - cover_letter_postgres
      - cover_letter_qdrant
      - cover_letter_minio
    environment:
      - POSTGRES_DB=cover_letter_db
      - POSTGRES_USER=cover_letter_user
      - POSTGRES_PASSWORD=cover_letter_pass
      - POSTGRES_HOST=cover_letter_postgres
      - POSTGRES_PORT=5432

      - QDRANT_URL=http://cover_letter_qdrant:6333

      - MINIO_HOST=cover_letter_minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin

      - KAFKA_BROKER=kafka_broker
      - KAFKA_PORT=9092
      - KAFKA_TOPIC_FILE_UPLOADED=file_uploaded
      - KAFKA_CONSUMER_GROUP=embedding_consumer_group
      - KAFKA_BOOTSTRAP_SERVERS=kafka_broker:9092
    env_file:
      - backend/services/service_cover_letter/.env

    volumes:
      - ./backend/services/service_cover_letter:/app/service_cover_letter
    command: uvicorn src.api_cover_letter_main:app --host 0.0.0.0 --port 8010 --reload

  # kafka_broker:
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka_broker
    container_name: kafka_broker
    networks:
     - portofolio_network
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since we’re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka_data:/var/lib/kafka/data # Store Kafka logs on your local machine.






  cover_letter_postgres:
    image: postgres:latest
    container_name: cover_letter_postgres
    networks:
      - portofolio_network
    environment:
      - POSTGRES_DB=cover_letter_db
      - POSTGRES_USER=cover_letter_user
      - POSTGRES_PASSWORD=cover_letter_pass
    ports:
      - "5432:5432"
    volumes:
      - cover_letter_postgres_data:/var/lib/postgresql/data

  cover_letter_qdrant:
    image: qdrant/qdrant:latest
    container_name: cover_letter_qdrant
    networks:
      - portofolio_network
    ports:
      - "6333:6333"
    volumes:
      - cover_letter_qdrant_data:/qdrant/storage

  cover_letter_minio:
    image: minio/minio:latest
    container_name: cover_letter_minio
    networks:
      - portofolio_network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DOMAIN=cover_letter_minio

      # - MINIO_SERVER_URL=http://localhost:9000  # ✅ Required for internal DNS

      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - cover_letter_minio_data:/data

  # ollama:
  #   container_name: ollama
  #   image: ollama/ollama:latest
  #   networks:
  #     - portofolio_network
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   environment:
  #     - OLLAMA_HOST=http://ollama:11434
  #     - OLLAMA_MODEL_STORE=/root/.ollama
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - capabilities: [gpu]
  #   restart: unless-stopped




volumes:
  cover_letter_postgres_data:
  cover_letter_qdrant_data:
  cover_letter_minio_data:
  ollama_data:
  kafka_data:


networks:
  portofolio_network:
    name: portofolio_network

# Commented experiments & historical attempts (for transparency)

# - MINIO_DOMAIN=cover_letter_minio
# - MINIO_URL=http://cover_letter_minio:9000
# - command: server --address ":9000" --console-address ":9001" /data --compat

# Data Warehouse Services (reserved for future use)

# warehouse_postgres:
#   image: postgres:latest
#   container_name: warehouse_postgres
#   environment:
#     - POSTGRES_DB=warehouse_db
#     - POSTGRES_USER=warehouse_user
#     - POSTGRES_PASSWORD=warehouse_pass
#   ports:
#     - "5434:5432"
#   volumes:
#     - warehouse_postgres_data:/var/lib/postgresql/data

# warehouse_qdrant:
#   image: qdrant/qdrant:latest
#   container_name: warehouse_qdrant
#   ports:
#     - "6336:6333"
#   volumes:
#     - warehouse_qdrant_data:/qdrant/storage

# warehouse_minio:
#   image: minio/minio:latest
#   container_name: warehouse_minio
#   environment:
#     - MINIO_ROOT_USER=minioadmin
#     - MINIO_ROOT_PASSWORD=minioadmin
#   command: server /data --console-address ":9002"
#   ports:
#     - "9200:9000"
#     - "9201:9001"
#   volumes:
#     - warehouse_minio_data:/data

# warehouse_graphdb:
#   image: neo4j:latest
#   container_name: warehouse_graphdb
#   environment:
#     - NEO4J_AUTH=neo4j/neo4jpassword
#   ports:
#     - "7474:7474"
#     - "7687:7687"
#   volumes:
#     - warehouse_graphdb_data:/data
